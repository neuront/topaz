assert: require('assert')
core: require('./topaz')

func renderHTML(elements, variables)
    return core.HTMLBasisBuilder(variables).applyAndRenderSync(elements)

func renderHTMLApplied(elements)
    return core.HTMLBasisBuilder().renderApplied(elements)

func renderBsf(elements, variables)
    return core.BootstrapFontawesomeBuilder(variables).applyAndRenderSync(elements)

func applyBsf(text, variables)
    b: core.BootstrapFontawesomeBuilder(variables)
    return b.applyVariablesToSync(b.buildTextToElements(text))

func applyVariables(elements, variables)
    return core.Builder(variables).applyVariablesToSync(elements)

if true
    describe('build static', %)

    it('elements triggers', ():
        class TestBuilder: core.Builder
            ctor() super()
                this.triggers: []

            func onTagBegin(element, stack)
                this.triggers.push({
                    type: 'tagBegin',
                    tag: element.tag,
                    parent: element.parent.tag,
                })

            func onTagEnd(element)
                this.triggers.push({
                    type: 'tagEnd',
                    tag: element.tag,
                    parent: element.parent.tag,
                })

        builder: TestBuilder()
        builder.buildTextToElements('''
div
  span
  input
form
  icon
  p
    button
    label
''')

        assert.deepEqual([
            {type: 'tagBegin', tag: 'div', parent: undefined},
                {type: 'tagBegin', tag: 'span', parent: 'div'},
                {type: 'tagEnd', tag: 'span', parent: 'div'},
                {type: 'tagBegin', tag: 'input', parent: 'div'},
                {type: 'tagEnd', tag: 'input', parent: 'div'},
            {type: 'tagEnd', tag: 'div', parent: undefined},
            {type: 'tagBegin', tag: 'form', parent: undefined},
                {type: 'tagBegin', tag: 'icon', parent: 'form'},
                {type: 'tagEnd', tag: 'icon', parent: 'form'},
                {type: 'tagBegin', tag: 'p', parent: 'form'},
                    {type: 'tagBegin', tag: 'button', parent: 'p'},
                    {type: 'tagEnd', tag: 'button', parent: 'p'},
                    {type: 'tagBegin', tag: 'label', parent: 'p'},
                    {type: 'tagEnd', tag: 'label', parent: 'p'},
                {type: 'tagEnd', tag: 'p', parent: 'form'},
            {type: 'tagEnd', tag: 'form', parent: undefined},
        ], builder.triggers)
    )

    it('build & apply', ():
        builder: core.HTMLBasisBuilder()
        elements: builder.buildTextToElements('input#q.x type=text disabled')
        assert.strictEqual(1, elements.length)
        e: elements[0]
        assert.strictEqual('input', e.tag)
        assert.strictEqual('q', e.attributes.id.value)
        assert.strictEqual('text', e.attributes.type.value)
        assert.strictEqual(1, e.classes.length)
        assert.strictEqual('x', e.classes[0].value)
        assert.strictEqual(1, e.args.length)
        assert.strictEqual('disabled', e.args[0].value)

        class TestBuilder: core.HTMLBasisBuilder
            ctor() super()
                this.triggers: []

            func onTagApplied(element)
                this.triggers.push({
                    tag: element.tag,
                    parent: null if element.parent = null else element.parent.tag,
                })
                return element

        testBuilder: TestBuilder()
        applied: e.applyVariablesSync(null, testBuilder)
        assert.strictEqual('input', applied.tag)
        assert.strictEqual('q', applied.attributes.id)
        assert.strictEqual('text', applied.attributes.type)
        assert.strictEqual(1, applied.classes.length)
        assert.strictEqual('x', applied.classes[0])
        assert.strictEqual(1, applied.args.length)
        assert.strictEqual('disabled', applied.args[0])

        assert.strictEqual('input', e.tag)
        assert.strictEqual('q', e.attributes.id.value)
        assert.strictEqual('text', e.attributes.type.value)
        assert.strictEqual(1, e.classes.length)
        assert.strictEqual('x', e.classes[0].value)
        assert.strictEqual(1, e.args.length)
        assert.strictEqual('disabled', e.args[0].value)

        assert.deepEqual([{
            tag: 'input',
            parent: null,
        }], testBuilder.triggers)
    )

    if true
        it('render simple', %)
        builder: core.HTMLBasisBuilder()
        elements: builder.buildTextToElements('''
input value=Hello
span data-textValue="world!"
''')
        assert.strictEqual(2, elements.length)

        EXPECT: '''
<input value="Hello">
<span data-textValue="world!">
</span>
        '''.trim()
        assert.strictEqual(EXPECT, renderHTML(elements))

    if true
        it('render escape', %)
        builder: core.HTMLBasisBuilder()
        elements: builder.buildTextToElements('''
input value='&"'
span
   :<===>
''')
        assert.strictEqual(2, elements.length)

        EXPECT: '''
<input value="&#38;&#34;">
<span>
   &#60;===&#62;
</span>
        '''.trim()
        assert.strictEqual(EXPECT, renderHTML(elements))

    if true
        it('render elements', %)
        builder: core.HTMLBasisBuilder()
        elements: builder.buildTextToElements('''
html5
  head
    charset utf-8
    title
      :Hello Topaz
    cssfile "/static/css/bootstrap.css"
    jsfile "/static/js/jquery.js"
    js
      $(document).ready(function() {
        console.log("hello, world <3")
      });
  body
    p
      :Hello world <3
''')
        assert.strictEqual(1, elements.length)
        root: elements[0]
        assert.strictEqual(1, root.findChildren('head').length)
        assert.strictEqual(1, root.findChildren('body').length)

        HEAD_EXPECT: '  ' + '''
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>
      Hello Topaz
    </title>
    <link rel="stylesheet" type="text/css" href="/static/css/bootstrap.css">
    <script type="text/javascript" src="/static/js/jquery.js">
    </script>
    <script type="text/javascript">
      $(document).ready(function() {
        console.log("hello, world <3")
      });
    </script>
  </head>
    '''.trim()

        assert.strictEqual(HEAD_EXPECT, renderHTML(root.findChildren('head')), 'Render head')

        BODY_EXPECT: '  ' + '''
  <body>
    <p>
      Hello world &#60;3
    </p>
  </body>
    '''.trim()

        assert.strictEqual(BODY_EXPECT, renderHTML(root.findChildren('body')), 'Render body')

        ROOT_EXPECT: '''
<!doctype html>
<html>
  <head>
    <meta charset="utf-8">
    <title>
      Hello Topaz
    </title>
    <link rel="stylesheet" type="text/css" href="/static/css/bootstrap.css">
    <script type="text/javascript" src="/static/js/jquery.js">
    </script>
    <script type="text/javascript">
      $(document).ready(function() {
        console.log("hello, world <3")
      });
    </script>
  </head>
  <body>
    <p>
      Hello world &#60;3
    </p>
  </body>
    '''.trim()

        assert.strictEqual(ROOT_EXPECT, renderHTML([root]), 'Render all')

    if true
        it('render element attrs & classes', %)
        builder: core.HTMLBasisBuilder()
        elements: builder.buildTextToElements('''
div#root.topaz
  span.topax.topay
    :::
    the quick "brown" <fox> jumps over a lazy dog
''')

        EXPECT: '''
<div class="topaz" id="root">
  <span class="topax topay">
    the quick &#34;brown&#34; &#60;fox&#62; jumps over a lazy dog
  </span>
</div>
        '''.trim()

        assert.strictEqual(EXPECT, renderHTML(elements))

    if true
        it('text block opts', %)
        builder: core.HTMLBasisBuilder()
        elements: builder.buildTextToElements('''
pre
  ::: left=trunc eol=br
  the quick "brown" <fox>
    <fox> jumps over a lazy dog
div
  ::: escape=no
  This is a <strong>template</strong> engine.
''')

        EXPECT: '''
<pre>
the quick &#34;brown&#34; &#60;fox&#62;<br>  &#60;fox&#62; jumps over a lazy dog
</pre>
<div>
  This is a <strong>template</strong> engine.
</div>
    '''.trim()

        assert.strictEqual(EXPECT, renderHTML(elements))

    if true
        it('text block opts with errors', %)
        try
            core.HTMLBasisBuilder().buildTextToElements('''
pre
  ::: left
  the quick "brown" <fox> jumps over a lazy dog
'''.trim())
            assert.ok(false, 'Expect error')
        catch
            assert.strictEqual(2, $e.line)
            assert.strictEqual('Option not set for text block', $e.message)
            assert.strictEqual('token', $e.type)
            assert.strictEqual('left', $e.object.image)

        try
            core.HTMLBasisBuilder().buildTextToElements('''
pre
  ::: left=nothing
  the quick "brown" <fox> jumps over a lazy dog
'''.trim())
            assert.ok(false, 'Expect error')
        catch
            assert.strictEqual(2, $e.line)
            assert.strictEqual('Invalid option value for text block', $e.message)
            assert.strictEqual('token', $e.type)
            assert.strictEqual('nothing', $e.object.image)

        try
            core.HTMLBasisBuilder().buildTextToElements('''
pre
  ::: left=trunc right=keep left=trim
  the quick "brown" <fox> jumps over a lazy dog
'''.trim())
            assert.ok(false, 'Expect error')
        catch
            assert.strictEqual(2, $e.line)
            assert.strictEqual('Duplicated option for text block', $e.message)
            assert.strictEqual('token', $e.type)
            assert.strictEqual('left', $e.object.image)

if true
    describe('build dynamic', %)
    if true
        it('apply', %)
        builder: core.HTMLBasisBuilder()
        elements: builder.buildTextToElements('''input value=(vv)''')
        assert.strictEqual(1, elements.length)
        e: elements[0]
        assert.strictEqual('input', e.tag)
        assert.strictEqual('vv', e.attributes.value.name)

        applied: e.applyVariablesSync(null, core.Builder({vv: 'The quick brown input'}))
        assert.strictEqual('input', applied.tag)
        assert.strictEqual('The quick brown input', applied.attributes.value)

        assert.strictEqual('input', e.tag)
        assert.strictEqual('vv', e.attributes.value.name)

        elements_: builder.buildTextToElements('input#(ii).(cc).dd (aa) value=(vv)')
        assert.strictEqual(1, elements_.length)
        e_: elements_[0]
        assert.strictEqual('input', e_.tag)
        assert.strictEqual('ii', e_.attributes.id.name)
        assert.strictEqual('vv', e_.attributes.value.name)
        assert.strictEqual(2, e_.classes.length)
        assert.strictEqual('cc', e_.classes[0].name)
        assert.strictEqual('dd', e_.classes[1].value)
        assert.strictEqual(1, e_.args.length)
        assert.strictEqual('aa', e_.args[0].name)

        EXPECT: '<input class="whatever dd" id="myId" value="A lazy input">'

        assert.strictEqual(EXPECT, renderHTML(elements_, {
            ii: 'myId',
            vv: 'A lazy input',
            cc: 'whatever',
            dd: 'nothing',
            aa: 'disabled',
        }))

    if true
        it('expression', %)
        builder: core.HTMLBasisBuilder()
        elements: builder.buildTextToElements('input value=(15 / a - 4 / b) ' +
                                              'placeholder=(c.d * -2 + e.f * 3 % 2)')
        assert.strictEqual(1, elements.length)

        applied: elements[0].applyVariablesSync(null, core.Builder({
            a: 3,
            b: 2,
            c: {d: -2},
            d: 97,
            e: {f: 3},
            f: 89,
        }))
        assert.strictEqual('input', applied.tag)
        assert.strictEqual(3, applied.attributes.value)
        assert.strictEqual(5, applied.attributes.placeholder)

        elements_: builder.buildTextToElements('input value=(1 + 1 - 2)')
        assert.strictEqual(1, elements_.length)
        applied_: elements_[0].applyVariablesSync(null, core.Builder())

        EXPECT: '<input value="0">'
        assert.strictEqual(EXPECT, applied_.render(core.HTMLBasisBuilder()))

    if true
        it('conditional variables', %)
        builder: core.HTMLBasisBuilder()
        elements: builder.buildTextToElements('''
div
  input value=('a' + 'b' if x < y else 'c' + 'd')
  input value=('a' + ('b' if x < y else 'c') + 'd')
''')
        assert.strictEqual(1, elements.length)

        applied: elements[0].applyVariablesSync(null, core.Builder({
            x: 0,
            y: 1,
        }))
        assert.strictEqual(2, applied.children.length)
        assert.strictEqual('input', applied.children[0].tag)
        assert.strictEqual('ab', applied.children[0].attributes.value)
        assert.strictEqual('input', applied.children[1].tag)
        assert.strictEqual('abd', applied.children[1].attributes.value)

        applied_: elements[0].applyVariablesSync(null, core.Builder({
            x: 1,
            y: 0,
        }))
        assert.strictEqual(2, applied_.children.length)
        assert.strictEqual('input', applied_.children[0].tag)
        assert.strictEqual('cd', applied_.children[0].attributes.value)
        assert.strictEqual('input', applied_.children[1].tag)
        assert.strictEqual('acd', applied_.children[1].attributes.value)

    it('compound conditions', ():
        builder: core.HTMLBasisBuilder()
        elements: builder.buildTextToElements('''
div
  % if !-x.val < y.val || !u.val && v.val
    span
  % else
    i
  % if !(-x.val < y.val || !u.val) && v.val
    pre
  % else
    p
''')
        assert.strictEqual(1, elements.length)

        class TestBuilder: core.HTMLBasisBuilder
            ctor(v) super(v)
                this.triggers: []

            func onTagApplied(element)
                this.triggers.push({
                    tag: element.tag,
                    parent: null if element.parent = null else element.parent.tag,
                })
                return element

        zptf_builder: TestBuilder({
            x: {val: 0},
            y: {val: 1},
            u: {val: true},
            v: {val: false},
        })
        applied_zptf: elements[0].applyVariablesSync(null, zptf_builder)
        assert.strictEqual(2, applied_zptf.children.length)
        assert.strictEqual('i', applied_zptf.children[0].tag)
        assert.strictEqual('p', applied_zptf.children[1].tag)

        assert.deepEqual([{
            tag: 'i',
            parent: 'div',
        }, {
            tag: 'p',
            parent: 'div',
        }, {
            tag: 'div',
            parent: null,
        }], zptf_builder.triggers)

        zmtf_builder: TestBuilder({
            x: {val: 0},
            y: {val: -1},
            u: {val: true},
            v: {val: false},
        })
        applied_zmtf: elements[0].applyVariablesSync(null, zmtf_builder)
        assert.strictEqual(2, applied_zmtf.children.length)
        assert.strictEqual('span', applied_zmtf.children[0].tag)
        assert.strictEqual('p', applied_zmtf.children[1].tag)

        assert.deepEqual([{
            tag: 'span',
            parent: 'div',
        }, {
            tag: 'p',
            parent: 'div',
        }, {
            tag: 'div',
            parent: null,
        }], zmtf_builder.triggers)

        applied_zmtt: elements[0].applyVariablesSync(null, core.Builder({
            x: {val: 0},
            y: {val: -1},
            u: {val: true},
            v: {val: true},
        }))
        assert.strictEqual(2, applied_zmtt.children.length)
        assert.strictEqual('span', applied_zmtt.children[0].tag)
        assert.strictEqual('pre', applied_zmtt.children[1].tag)

        applied_zpff: elements[0].applyVariablesSync(null, core.Builder({
            x: {val: 0},
            y: {val: 1},
            u: {val: false},
            v: {val: false},
        }))
        assert.strictEqual(2, applied_zpff.children.length)
        assert.strictEqual('i', applied_zpff.children[0].tag)
        assert.strictEqual('p', applied_zpff.children[1].tag)

        applied_zmff: elements[0].applyVariablesSync(null, core.Builder({
            x: {val: 0},
            y: {val: -1},
            u: {val: false},
            v: {val: false},
        }))
        assert.strictEqual(2, applied_zmff.children.length)
        assert.strictEqual('span', applied_zmff.children[0].tag)
        assert.strictEqual('p', applied_zmff.children[1].tag)

        applied_zpft: elements[0].applyVariablesSync(null, core.Builder({
            x: {val: 0},
            y: {val: 1},
            u: {val: false},
            v: {val: true},
        }))
        assert.strictEqual(2, applied_zpft.children.length)
        assert.strictEqual('span', applied_zpft.children[0].tag)
        assert.strictEqual('p', applied_zpft.children[1].tag)

        applied_zmft: elements[0].applyVariablesSync(null, core.Builder({
            x: {val: 0},
            y: {val: 1},
            u: {val: false},
            v: {val: true},
        }))
        assert.strictEqual(2, applied_zmft.children.length)
        assert.strictEqual('span', applied_zmft.children[0].tag)
        assert.strictEqual('p', applied_zmft.children[1].tag)
    )

    if true
        it('numeric property', %)
        builder: core.HTMLBasisBuilder()
        elements: builder.buildTextToElements('input value=0')

        EXPECT: '<input value="0">'

        assert.strictEqual(EXPECT, renderHTML(elements))

    it('list applied', ():
        b: core.HTMLBasisBuilder()
        elements: b.buildTextToElements('''
div
  % for i in x
    span#i
''')
        assert.strictEqual(1, elements.length)

        class TestBuilder: core.HTMLBasisBuilder
            ctor(v) super(v)
                this.triggers: []

            func onTagApplied(element)
                this.triggers.push({
                    tag: element.tag,
                    parent: null if element.parent = null else element.parent.tag,
                })
                return element

        builder: TestBuilder({
            x: ['a', 'b', 'c'],
        })
        elements[0].applyVariablesSync(null, builder)

        assert.deepEqual([{
            tag: 'span',
            parent: 'div',
        }, {
            tag: 'span',
            parent: 'div',
        }, {
            tag: 'span',
            parent: 'div',
        }, {
            tag: 'div',
            parent: null,
        }], builder.triggers)
    )

    if true
        it('list', %)
        builder: core.HTMLBasisBuilder()
        elements: builder.buildTextToElements('''
select
  % for index, value in ["ab", x, "cd"]
    option value=(index)
      % "Got: " + value
div
''')
        assert.strictEqual(2, elements.length)

        EXPECT: '''
<select>
  <option value="0">
      Got: ab
  </option>
  <option value="1">
      Got: ^&#60;v&#62;
  </option>
  <option value="2">
      Got: cd
  </option>
</select>
<div>
</div>
    '''.trim()
        assert.strictEqual(EXPECT, renderHTML(elements, {x: "^<v>"}))

    if true
        it('dict values', %)
        builder: core.HTMLBasisBuilder()
        elements: builder.buildTextToElements('''
select
  % for p in [{id: 0, name: 'Alice', age: aliceAge}, {id: 1, name: 'Bob', age: 17}]
    option value=(p.id)
      % "Name: " + p.name + ", age: " + p.age
div
''')
        assert.strictEqual(2, elements.length)

        EXPECT: '''
<select>
  <option value="0">
      Name: Alice, age: 23
  </option>
  <option value="1">
      Name: Bob, age: 17
  </option>
</select>
<div>
</div>
    '''.trim()
        assert.strictEqual(EXPECT, renderHTML(elements, {aliceAge: 23}))

    if true
        it('property', %)
        builder: core.HTMLBasisBuilder()
        elements: builder.buildTextToElements('input value=(x.y) placeholder=(x.z.u)')

        EXPECT: '''
<input value="yy" placeholder="zu">
    '''.trim()
        assert.strictEqual(EXPECT, renderHTML(elements, {x: {y: 'yy', z: {u: 'zu'}}}))

        EXPECT_A: '''
<input value="yy">
    '''.trim()
        assert.strictEqual(EXPECT_A, renderHTML(elements, {x: {y: 'yy', z: {}}}))

        try
            renderHTML(elements, {x: {y: 'yy'}})
            assert.ok(false, 'Expect error')
        catch
            assert.strictEqual(1, $e.line)
            assert.strictEqual('Access property u from undefined', $e.message)
            assert.strictEqual('value', $e.type)

    if true
        it('build dict', %)
        builder: core.HTMLBasisBuilder()
        e: builder.buildTextToElements('''
        button data={} style={
            color: 'white',
            background-color: '#ccd',
        }
        '''.trim())
        assert.strictEqual(1, e.length)
        btn: e[0]
        assert.strictEqual('button', btn.tag)
        assert.deepEqual({}, btn.attributes.data.dict)
        assert.deepEqual({
            color: {
              line: 2,
              value: 'white',
            },
            'background-color': {
              line: 3,
              value: '#ccd',
            },
        }, btn.attributes.style.dict)

    if true
        it('apply dict', %)
        builder: core.HTMLBasisBuilder({
            x: 3,
            y: '#ccd',
            e: '"',
        })
        r: builder.buildAndRenderTextSync('''
        button data={id: 2 + x, target: 'my-target', esc: e} style={
            color: 'white',
            background-color: y
        }
            :squeeze me
        '''.trim())
        assert.strictEqual('''
<button data-id="5" data-target="my-target" data-esc="&#34;" style="color:white;background-color:#ccd">
            squeeze me
</button>
        '''.trim(), r)

    if true
        it('apply null', %)
        builder: core.HTMLBasisBuilder({ x: null })
        r: builder.buildAndRenderTextSync('''
        button#('a' if x == null else 'b').('c' if x != null else 'd').(null)
            :squeeze me
        '''.trim())

        assert.strictEqual('''
<button class="d" id="a">
            squeeze me
</button>
        '''.trim(), r)

    if true
        it('look up', %)
        builder: core.HTMLBasisBuilder()
        elements: builder.buildTextToElements('''
p
   % 1 + x[0] / 2
   :point,
   % 2 * x[1] - 1
   :coins
''')

        EXPECT: '''
<p>
   3
   point,
   199
   coins
</p>
    '''.trim()
        assert.strictEqual(EXPECT, renderHTML(elements, {x: [4, 100]}))

    if true
        it('nested list', %)
        builder: core.HTMLBasisBuilder()
        elements: builder.buildTextToElements('''
select
  % for index, value in [["ab", x, "cd"], []][0]
    option value=(index)
      % "Got: " + value
div
''')
        assert.strictEqual(2, elements.length)

        EXPECT: '''
<select>
  <option value="0">
      Got: ab
  </option>
  <option value="1">
      Got: uv
  </option>
  <option value="2">
      Got: cd
  </option>
</select>
<div>
</div>
    '''.trim()
        assert.strictEqual(EXPECT, renderHTML(elements, {x: "uv"}))

    if true
        it('branch root without else', %)
        builder: core.HTMLBasisBuilder()
        elements: builder.buildTextToElements('''
div
% if x
    input value=0
p
''')

        assert.strictEqual(3, elements.length)
        applied: applyVariables(elements, {
            x: [],
        })
        assert.strictEqual(2, applied.length)

        EXPECT: '''
<div>
</div>
<p>
</p>
'''.trim()
        assert.strictEqual(EXPECT, renderHTMLApplied(applied))

        applied_: applyVariables(elements, {
            x: '0',
        })
        assert.strictEqual(3, applied_.length)

        EXPECT_: '''
<div>
</div>
<input value="0">
<p>
</p>
'''.trim()
        assert.strictEqual(EXPECT_, renderHTMLApplied(applied_))

    if true
        it('branch root', %)
        builder: core.HTMLBasisBuilder()
        elements: builder.buildTextToElements('''
div
% if x + y
    input value=0
% else
    label
p
''')
        assert.strictEqual(3, elements.length)
        applied: applyVariables(elements, {
            x: 1,
            y: 2,
        })
        assert.strictEqual(3, applied.length)

        EXPECT: '''
<div>
</div>
<input value="0">
<p>
</p>
'''.trim()
        assert.strictEqual(EXPECT, renderHTMLApplied(applied))

        applied_: applyVariables(elements, {
            x: 1,
            y: -1,
        })
        assert.strictEqual(3, applied.length)

        EXPECT_: '''
<div>
</div>
<label>
</label>
<p>
</p>
'''.trim()
        assert.strictEqual(EXPECT_, renderHTMLApplied(applied_))

    if true
        it('branch not root', %)
        builder: core.HTMLBasisBuilder()
        elements: builder.buildTextToElements('''
div
  % if x + y
    input value=0
  % else
    label
p
''')
        assert.strictEqual(2, elements.length)
        applied: applyVariables(elements, {
            x: 1,
            y: 2,
        })
        assert.strictEqual(2, applied.length)

        EXPECT: '''
<div>
  <input value="0">
</div>
<p>
</p>
'''.trim()
        assert.strictEqual(EXPECT, renderHTMLApplied(applied))

        applied_: applyVariables(elements, {
            x: 1,
            y: -1,
        })
        assert.strictEqual(2, applied.length)

        EXPECT_: '''
<div>
  <label>
  </label>
</div>
<p>
</p>
'''.trim()
        assert.strictEqual(EXPECT_, renderHTMLApplied(applied_))

    if true
        it('decls 1 for loop', %)
        builder: core.HTMLBasisBuilder()
        elements: builder.buildTextToElements('''
% for v in x
  p
    input value=(v)
hr
''')
        assert.strictEqual(2, elements.length)
        applied: applyVariables(elements, {
            x: ['a', 'b', 'c'],
        })
        assert.strictEqual(4, applied.length)

        EXPECT: '''
<p>
    <input value="a">
</p>
<p>
    <input value="b">
</p>
<p>
    <input value="c">
</p>
<hr>
    '''.trim()
        assert.strictEqual(EXPECT, renderHTMLApplied(applied))

        assert.strictEqual(2, elements.length)
        applied_: applyVariables(elements, {
            x: {
                a: 'x',
                b: 'y',
            },
        })
        assert.strictEqual(3, applied_.length)

        EXPECT_: '''
<p>
    <input value="x">
</p>
<p>
    <input value="y">
</p>
<hr>
    '''.trim()
        assert.strictEqual(EXPECT_, renderHTMLApplied(applied_))

    if true
        it('decls 2 loop', %)
        builder: core.HTMLBasisBuilder()
        elements: builder.buildTextToElements('''
% for k, v in x
  p
    span
      % v
    input value=(k)
hr
''')
        assert.strictEqual(2, elements.length)
        applied: applyVariables(elements, {
            x: ['a', 'b', 'c'],
        })
        assert.strictEqual(4, applied.length)

        EXPECT: '''
<p>
    <span>
      a
    </span>
    <input value="0">
</p>
<p>
    <span>
      b
    </span>
    <input value="1">
</p>
<p>
    <span>
      c
    </span>
    <input value="2">
</p>
<hr>
        '''.trim()
        assert.strictEqual(EXPECT, renderHTMLApplied(applied))

        assert.strictEqual(2, elements.length)
        applied_: applyVariables(elements, {
            x: {
                a: 'x',
                b: 'y',
            },
        })
        assert.strictEqual(3, applied_.length)

        EXPECT_: '''
<p>
    <span>
      x
    </span>
    <input value="a">
</p>
<p>
    <span>
      y
    </span>
    <input value="b">
</p>
<hr>
        '''.trim()
        assert.strictEqual(EXPECT_, renderHTMLApplied(applied_))

    if true
        it('build include', %)
        builder: core.Builder()
        e: builder.buildTextToElements('''
% if x
    % include 'path/a' {a: 10, b: 20}
% else
    % include path-b
'''.trim())
        assert.strictEqual(1, e.length)
        ifE: e[0]
        assert.strictEqual('x', ifE.predicate.name)

        assert.strictEqual(1, ifE.consequence.length)
        consq: ifE.consequence[0]
        assert.strictEqual('path/a', consq.path.value)
        assert.deepEqual({
            a: {
                line: 2,
                value: 10,
            },
            b: {
                line: 2,
                value: 20,
            },
        }, consq.values.dict)

        assert.strictEqual(1, ifE.alternative.length)
        alter: ifE.alternative[0]
        assert.strictEqual('path-b', alter.path.value)
        assert.deepEqual({}, alter.values.dict)

    it('compound expr', ():
        builder: core.HTMLBasisBuilder()
        elements: builder.buildTextToElements('''
div
  % if !a || w < u + v
    input value=a disabled=(m && n)
  % else
    input value=b disabled=(m && n)
p
''')
        assert.strictEqual(2, elements.length)

        func applyTest(variables, expected, hint)
            applied: applyVariables(elements, variables)
            assert.strictEqual(expected.trim(), renderHTMLApplied(applied), hint)

        applyTest({
            a: [],
            w: 10,
            u: 3,
            v: 5,
            m: true,
            n: false,
        }, '''
<div>
  <input value="a" disabled="false">
</div>
<p>
</p>
        ''', 'FFTF')

        applyTest({
            a: true,
            w: 1,
            u: 3,
            v: 5,
            m: true,
            n: true,
        }, '''
<div>
  <input value="a" disabled="true">
</div>
<p>
</p>
        ''', 'TTTT')

        applyTest({
            a: true,
            w: 1,
            u: 3,
            v: -5,
            m: false,
            n: true,
        }, '''
<div>
  <input value="b" disabled="false">
</div>
<p>
</p>
        ''', 'TFFT')

        applyTest({
            a: {},
            w: 1,
            u: 3,
            v: -5,
            m: false,
            n: false,
        }, '''
<div>
  <input value="a" disabled="false">
</div>
<p>
</p>
        ''', 'FFFF')
    )

    it('nested expr', ():
        builder: core.HTMLBasisBuilder()
        elements: builder.buildTextToElements('''
div
  input value=(w / (u * (v + p)))
''')
        assert.strictEqual(1, elements.length)

        func applyTest(variables, expected, hint)
            applied: applyVariables(elements, variables)
            assert.strictEqual(expected.trim(), renderHTMLApplied(applied), hint)

        applyTest({
            w: 12,
            u: 3,
            v: 5,
            p: -1,
        }, '''
<div>
  <input value="1">
</div>
        ''', '12 / (3 * (5 + -1))')

        applyTest({
            w: 8,
            u: 2,
            v: -1,
            p: -1,
        }, '''
<div>
  <input value="-2">
</div>
        ''', '8 / (2 * (-1 + -1))')

        applyTest({
            w: 1,
            u: 2,
            v: 1,
            p: -1,
        }, '''
<div>
  <input value="Infinity">
</div>
        ''', '1 / (2 * (1 + -1))')
    )

if true
    describe('bootstrap fontawesome', %)
    if true
        it('build', %)
        builder: core.HTMLBasisBuilder()
        elements: builder.buildTextToElements('''
container
    row
        grid size=4 offset=2
            input#myInput placeholder=hello-world disabled
''')

        EXPECT: '''
<div class="container">
    <div class="row">
        <div class="col-sm-4 col-sm-offset-2">
            <input class="form-control" id="myInput" placeholder="hello-world" type="text" disabled="disabled">
        </div>
    </div>
</div>
        '''.trim()

        assert.strictEqual(EXPECT, renderBsf(elements))

    if true
        it('labels & icons', %)
        builder: core.HTMLBasisBuilder()
        elements: builder.buildTextToElements('''
container
    row
        grid
            lbl#myLab
                :Default
            icon user
            lbl color=info
                :Info
''')

        EXPECT: '''
<div class="container">
    <div class="row">
        <div class="col-sm-4">
            <span class="label label-default" id="myLab">
                Default
            </span>
            <i class="fa fa-user">
            </i>
            <span class="label label-info">
                Info
            </span>
        </div>
    </div>
</div>
        '''.trim()

        assert.strictEqual(EXPECT, renderBsf(elements))

    if true
        it('form horizontal', %)
        builder: core.HTMLBasisBuilder()
        elements: builder.buildTextToElements('''
div.form-horizontal
    icon user
form-h
    row
        grid size=2
            icon file-o
        grid size=4 offset=2
            input#myInput placeholder=hello-world disabled
''')

        EXPECT: '''
<div class="form-horizontal">
    <i class="fa fa-user">
    </i>
</div>
<form class="form-horizontal form-submit">
    <div class="form-group">
        <div class="col-sm-2">
            <i class="fa fa-file-o">
            </i>
        </div>
        <div class="col-sm-4 col-sm-offset-2">
            <input class="form-control" id="myInput" placeholder="hello-world" type="text" disabled="disabled">
        </div>
    </div>
</form>
        '''.trim()

        assert.strictEqual(EXPECT, renderBsf(elements))

    if true
        it('build grids', %)
        builder: core.HTMLBasisBuilder()
        elements: builder.buildTextToElements('''
form-h
    row
        grid-c size=2
            :Count
        grid-s size=8
            % x
''')

        EXPECT: '''
<form class="form-horizontal form-submit">
    <div class="form-group">
        <label class="control-label col-sm-2">
            Count
        </label>
        <label class="form-control-static col-sm-8">
            91
        </label>
    </div>
</form>
        '''.trim()

        assert.strictEqual(EXPECT, renderBsf(elements, {x: 91}))

    if true
        it('form controls', %)
        builder: core.HTMLBasisBuilder()
        elements: builder.buildTextToElements('''
input
passwd
checkbox
  :Checkbox
radio
  :Radio
checkbox inline
  :Checkbox
radio inline
  :Radio
  icon user
''')

        EXPECT: '''
<input class="form-control" type="text">
<input class="form-control" type="password">
<div class="checkbox">
 <label>
  <input type="checkbox">
  Checkbox
 </label>
</div>
<div class="radio">
 <label>
  <input type="radio">
  Radio
 </label>
</div>
<label class="checkbox-inline">
  <input type="checkbox">
  Checkbox
</label>
<label class="radio-inline">
  <input type="radio">
  Radio
  <i class="fa fa-user">
  </i>
</label>
        '''.trim()

        assert.strictEqual(EXPECT, renderBsf(elements))

    if true
        it('action controls', %)
        builder: core.HTMLBasisBuilder()
        elements: builder.buildTextToElements('''
div
  btn
    :A
  btn onclick="alert(0)"
    :B
  btn.disable-btn color=info
    :C
  button#myBtn
    :D
''')

        EXPECT: '''
<div>
  <button class="btn btn-default" type="button">
    A
  </button>
  <button class="btn btn-default" onclick="alert(0)" type="button">
    B
  </button>
  <button class="disable-btn btn btn-info" type="button">
    C
  </button>
  <button id="myBtn">
    D
  </button>
</div>
        '''.trim()

        assert.strictEqual(EXPECT, renderBsf(elements))

    if true
        it('modals', %)
        builder: core.BootstrapFontawesomeBuilder()
        elements: builder.buildTextToElements('''
modal size=sm
  p
    :This is a modal
''')

        EXPECT_A: '''
<div class="modal fade" role="dialog" tabindex="-1" aria-labelledby="" aria-hidden="true">
 <div class="modal-dialog modal-sm">
  <div class="modal-content">
   <div class="modal-header">
    <button class="close" type="button" data-dismiss="modal">
     &times;
    </button>
   </div>
   <div class="modal-body">
  <p>
    This is a modal
  </p>
   </div>
  </div>
 </div>
</div>
        '''.trim()
        assert.strictEqual(EXPECT_A, renderBsf(elements), 'A')

        elements_: builder.buildTextToElements('''
modal
  title#myTitle
    :Modal title <3
  p
    :<3
''')

        EXPECT_B: '''
<div class="modal fade" role="dialog" tabindex="-1" aria-labelledby="" aria-hidden="true">
 <div class="modal-dialog modal-lg">
  <div class="modal-content">
   <div class="modal-header">
    <button class="close" type="button" data-dismiss="modal">
     &times;
    </button>
  <h4 class="modal-title" id="myTitle">
    Modal title &#60;3
  </h4>
   </div>
   <div class="modal-body">
  <p>
    &#60;3
  </p>
   </div>
  </div>
 </div>
</div>
        '''.trim()
        assert.strictEqual(EXPECT_B, renderBsf(elements_), 'B')

    if true
        it('modals toggle', %)
        builder: core.BootstrapFontawesomeBuilder()
        elements: builder.buildTextToElements('''
modal-toggle#ii color=info target=abc
  :Def
''')

        EXPECT: '''
<button class="btn btn-info" id="ii" data-target="#abc" data-toggle="modal" type="button">
  Def
</button>
        '''.trim()
        assert.strictEqual(EXPECT, renderBsf(elements))

    if true
        it('breadcrumb', %)
        builder: core.BootstrapFontawesomeBuilder()
        elements: applyBsf('''
breadcrumb#myBc
    a href='#a'
        :A
    a#B href='#b'
        :B
    a
        :C
''', {})

        assert.strictEqual(1, elements.length)
        bc: elements[0]
        assert.strictEqual('ol', bc.tag)
        assert.deepEqual({id: 'myBc'}, bc.attributes)
        assert.deepEqual(['breadcrumb'], bc.classes)
        assert.strictEqual(3, bc.children.length)

        li0: bc.children[0]
        assert.strictEqual('li', li0.tag)
        assert.strictEqual(1, li0.children.length)
        assert.deepEqual([], li0.classes)
        a0: li0.children[0]
        assert.strictEqual('a', a0.tag)
        assert.deepEqual({href: '#a', id: null}, a0.attributes)
        assert.deepEqual([], a0.classes)
        assert.strictEqual(1, a0.children.length)
        assert.strictEqual('A', a0.children[0].text)

        li1: bc.children[1]
        assert.strictEqual('li', li1.tag)
        assert.strictEqual(1, li1.children.length)
        assert.deepEqual([], li1.classes)
        a1: li1.children[0]
        assert.strictEqual('a', a1.tag)
        assert.deepEqual({href: '#b', id: 'B'}, a1.attributes)
        assert.deepEqual([], a1.classes)
        assert.strictEqual(1, a1.children.length)
        assert.strictEqual('B', a1.children[0].text)

        li2: bc.children[2]
        assert.strictEqual('li', li2.tag)
        assert.deepEqual(['active'], li2.classes)
        assert.strictEqual(1, li2.children.length)
        assert.strictEqual('C', li2.children[0].text)

    if true
        it('alert not dismiss', %)
        builder: core.BootstrapFontawesomeBuilder()
        elements: applyBsf('''
alert#myAlert
  :the quick brown fox
alert color=info dismiss=0
  :the quick brown fox
''', {})

        assert.strictEqual(2, elements.length)
        alert: elements[0]
        assert.strictEqual('div', alert.tag)
        assert.deepEqual(['alert', 'alert-warning'], alert.classes)
        assert.deepEqual({
            id: 'myAlert',
            role: 'alert',
        }, alert.attributes)

        alertInfo: elements[1]
        assert.strictEqual('div', alertInfo.tag)
        assert.deepEqual(['alert', 'alert-info'], alertInfo.classes)
        assert.deepEqual({
            id: null,
            role: 'alert',
        }, alertInfo.attributes)

    if true
        it('alert dismissable', %)
        builder: core.BootstrapFontawesomeBuilder()
        elements: applyBsf('''
alert#myDismiss dismiss
  :the quick
  :brown fox
alert dismiss=1 color=success
  :123
''', {})

        assert.strictEqual(2, elements.length)
        alert: elements[0]
        assert.strictEqual('div', alert.tag)
        assert.deepEqual(['alert', 'alert-warning', 'alert-dismissible'], alert.classes)
        assert.deepEqual({
            id: null,
            role: 'alert',
        }, alert.attributes)
        assert.strictEqual(2, alert.children.length)
        dismiss: alert.children[0]
        assert.strictEqual('button', dismiss.tag)
        content: alert.children[1]
        assert.strictEqual('div', content.tag)
        assert.deepEqual([], content.classes)
        assert.deepEqual({id: 'myDismiss'}, content.attributes)
        assert.strictEqual(2, content.children.length)
        assert.strictEqual('the quick', content.children[0].text)
        assert.strictEqual('brown fox', content.children[1].text)

        alertSuc: elements[1]
        assert.strictEqual('div', alertSuc.tag)
        assert.deepEqual(['alert', 'alert-success', 'alert-dismissible'], alertSuc.classes)
        assert.deepEqual({
            id: null,
            role: 'alert',
        }, alertSuc.attributes)

    if true
        it('nested branches', %)
        text: '''
div
  % if x + y
    % if u
      span
        :Count
      input value=0
  % else
    % if v
      icon user
    % else
      icon user-plus
p
  :Quick brown fox.
        '''.trim()

        assert.strictEqual('''
<div>
  <span>
        Count
  </span>
  <input class="form-control" value="0" type="text">
</div>
<p>
  Quick brown fox.
</p>
        '''.trim(), core.renderBootstrap(text, {
            x: 1,
            y: 2,
            u: true,
        }), 'TT')

        assert.strictEqual('''
<div>
</div>
<p>
  Quick brown fox.
</p>
        '''.trim(), core.renderBootstrap(text, {
            x: 1,
            y: 2,
            u: {},
        }), 'TF')

        assert.strictEqual('''
<div>
  <i class="fa fa-user">
  </i>
</div>
<p>
  Quick brown fox.
</p>
        '''.trim(), core.renderBootstrap(text, {
            x: NaN,
            y: 2,
            v: [undefined],
        }), 'FT')

        assert.strictEqual('''
<div>
  <i class="fa fa-user-plus">
  </i>
</div>
<p>
  Quick brown fox.
</p>
        '''.trim(), core.renderBootstrap(text, {
            x: [],
            y: [],
            v: '',
        }), 'FF')

describe('include', ():
    class IncludeTestBuilder: core.Builder
        ctor(templs, var) super(var)
            this.templs: templs

        func doIncludeSync(path)
            return this.templs[path]

    if true
        it('sync static', %)
        builder: IncludeTestBuilder({
            t: '''textarea\ninput''',
        }, {text: 'included'})

        e: builder.buildTextToElements('''
div
    % include t
    % text
'''.trim())

        applied: builder.applyVariablesToSync(e)
        assert.strictEqual(1, applied.length)
        div: applied[0]
        assert.strictEqual('div', div.tag)
        assert.strictEqual(3, div.children.length)
        assert.strictEqual('textarea', div.children[0].tag)
        assert.strictEqual('input', div.children[1].tag)
        assert.strictEqual('included', div.children[2].text)

        if true
            builder.resetVariables({text: 'included again'})
            applied: builder.applyVariablesToSync(e)
            assert.strictEqual(1, applied.length)
            div: applied[0]
            assert.strictEqual('div', div.tag)
            assert.strictEqual(3, div.children.length)
            assert.strictEqual('textarea', div.children[0].tag)
            assert.strictEqual('input', div.children[1].tag)
            assert.strictEqual('included again', div.children[2].text)

    if true
        it('sync branch', %)
        builder: IncludeTestBuilder({
            t: '''input\nbutton''',
            u: '''p''',
        }, {text: 'included', pred: true})

        e: builder.buildTextToElements('''
div
    % if pred
        % include t
    % else
        % include u
    % text
'''.trim())
        applied: builder.applyVariablesToSync(e)
        assert.strictEqual(1, applied.length)
        div: applied[0]
        assert.strictEqual('div', div.tag)
        assert.strictEqual(3, div.children.length)
        assert.strictEqual('input', div.children[0].tag)
        assert.strictEqual('button', div.children[1].tag)
        assert.strictEqual('included', div.children[2].text)

        if true
            builder.resetVariables({text: 'included again', pred: false})
            applied: builder.applyVariablesToSync(e)
            assert.strictEqual(1, applied.length)
            div: applied[0]
            assert.strictEqual('div', div.tag)
            assert.strictEqual(2, div.children.length)
            assert.strictEqual('p', div.children[0].tag)
            assert.strictEqual('included again', div.children[1].text)

    if true
        it('sync loop with vars', %)
        builder: IncludeTestBuilder({
            u: '''input data={id: id} value=(value)''',
        }, {text: 'included'})

        e: builder.buildTextToElements('''
div
    % for v in [{id: 0, value: 'The quick'}, {id: 1}]
        % include u v
    % text
'''.trim())
        applied: builder.applyVariablesToSync(e)
        assert.strictEqual(1, applied.length)
        div: applied[0]
        assert.strictEqual('div', div.tag)
        assert.strictEqual(3, div.children.length)
        assert.strictEqual('input', div.children[0].tag)
        assert.deepEqual({
            id: null,
            'data-id': '0',
            value: 'The quick',
        }, div.children[0].attributes)
        assert.strictEqual('input', div.children[1].tag)
        assert.deepEqual({
            id: null,
            'data-id': '1',
            value: undefined,
        }, div.children[1].attributes)
        assert.strictEqual('included', div.children[2].text)

)

if true
    describe('errors', %)
    if true
        it('lex', %)
        builder: core.Builder()
        try
            builder.buildTextToElements('''
                    input#q.x type=text disabled
                    `p class=m
            ''')
            assert.ok(false, 'Expect error')
        catch
            assert.strictEqual(3, $e.line)
            assert.strictEqual('Unexpected pattern', $e.message)
            assert.strictEqual('lex', $e.type)
            assert.strictEqual('`p class=m', $e.object)

    if true
        it('syntax', %)
        builder: core.Builder()
        try
            builder.buildTextToElements('''
                textarea
                  :::
                  the quick brown fox jumps over the lazy dog.
                  the quick brown fox jumps over the lazy dog.
                  :::
                  p#=
            '''.trim())
            assert.ok(false, 'Expect error')
        catch
            assert.strictEqual(6, $e.line)
            assert.strictEqual('Unexpected', $e.message)
            assert.strictEqual('token', $e.type)
            assert.strictEqual('=', $e.object.image)
            assert.strictEqual('eq', $e.object.type)

        try
            builder.buildTextToElements('p.(a b)')
            assert.ok(false, 'Expect error')
        catch
            assert.strictEqual(1, $e.line)
            assert.strictEqual('Unexpected', $e.message)
            assert.strictEqual('token', $e.type)
            assert.strictEqual('b', $e.object.image)
            assert.strictEqual('ident', $e.object.type)

        try
            builder.buildTextToElements('''
                div
                    p.(a
            '''.trim())
            assert.ok(false, 'Expect error')
        catch
            assert.strictEqual(2, $e.line)
            assert.strictEqual('Unexpected EOF, expect )', $e.message)
            assert.strictEqual('am', $e.type)

        try
            builder.buildTextToElements('''
                div
                    p.(a]
            '''.trim())
            assert.ok(false, 'Expect error')
        catch
            assert.strictEqual(2, $e.line)
            assert.strictEqual('Mismatch parenthesis, expect )', $e.message)
            assert.strictEqual('token', $e.type)
            assert.strictEqual(']', $e.object.image)

    if true
        it('elements', %)
        builder: core.Builder()
        try
            e: builder.buildAndRenderTextSync('''
div
  input
    p
'''.trim())
            assert.ok(false, 'Expect error')
        catch
            assert.strictEqual(2, $e.line)
            assert.strictEqual('Unexpected children for void element', $e.message)
            assert.strictEqual('element', $e.type)
            assert.strictEqual('input', $e.object.tag)

        try
            builder.buildTextToElements('p#a.b#c')
            assert.ok(false, 'Expect error')
        catch
            assert.strictEqual(1, $e.line)
            assert.strictEqual('Duplicate id', $e.message)
            assert.strictEqual('element', $e.type)
            assert.strictEqual('p', $e.object.tag)

    if true
        it('include syntax', %)
        builder: core.Builder()
        try
            e: builder.buildAndRenderTextSync('% include a :')
            assert.ok(false, 'Expect error')
        catch
            assert.strictEqual(1, $e.line)
            assert.strictEqual('Unexpected', $e.message)
            assert.strictEqual('token', $e.type)
            assert.strictEqual(':', $e.object.image)
